class Message{constructor(){this.worker,this.messageContext,this.statesToBeSynced=[]}send(t){t.messageContext=this.messageContext,void 0!==this.worker&&void 0!==this.worker.postMessage?this.worker.postMessage(t):postMessage(t)}sync(){var t={};for(let s=0;s<this.statesToBeSynced.length;s++){let e=this.statesToBeSynced[s];t[e]=this[e]}this.send(t)}}class Init extends Message{constructor(t){super(),this.worker=t,this.messageContext="Init",this.test="",this.host="",this.debug=!1,this.states={initFailure:-1,loaded:0,init:1,initReady:2,loadTest:3},this.state=-1,this.statesToBeSynced=["test","state","host","debug"]}initialize(){this.state=this.states.init,this.sync()}setInitReady(){this.state=this.states.initReady,this.sync()}setInitFailure(){this.state=this.states.initFailure,this.sync()}setDebug(){this.debug=!0}setLoadTest(t,s){this.test=t,this.host=s,this.state=this.states.loadTest,this.sync(worker)}}class NeedImage extends Message{constructor(t){super(),this.worker=t,this.messageContext="NeedImage",this.url="",this.imageData="",this.statesToBeSynced=["url","imageData"]}setURL(t){this.url=t,this.sync()}setImageData(t){this.imageData=t,this.sync()}}class RepeatMessage extends Message{constructor(t,s,e){super(),this.messageContext="RepeatMessage",this.stepIdx=t,this.repeat={fromStep:s,toStep:e},this.states={init:-1,repeating:0,done:1},this.state=this.states.init,this.repeatByCount={remaining:null,total:null},this.repeatByTime={until:null,timesRepeated:null},this.repeatTypes={count:0,time:1},this.repeatType=this.repeatTypes.count,this.statesToBeSynced=["stepIdx","repeat","state","repeatByCount","repeatByTime","repeatType"]}repeatCount(t,s){this.repeatType=this.repeatTypes.count,this.state=this.states.repeating,this.repeatByCount.remaining=t,this.repeatByCount.total=s,this.sync()}timedRepeat(t,s){this.repeatType=this.repeatTypes.time,this.state=this.states.repeating,this.repeatByTime.until=t,this.repeatByTime.timesRepeated=s,this.sync()}done(){this._state=this.states.done,this.sync()}}class Test extends Message{constructor(t){super(),this.description=t.description,this.disabled="true"==t.disabled,this.file=t.file,this.name=t.name,this.operator=t.operator,this.title=t.title,this.cleanup=t.cleanup,this.extends=t.extends,this.requiredPlugins=t.requiredPlugins?t.requiredPlugins:[],this.timeout=t.timeout?t.timeout:3600,this.steps=t.steps?t.steps:{},this.knownKeys=["operator","title","description","requiredPlugins","timeout","cleanup","steps"],this.messageContext="TestMessage",this.loaded=!1,this.result="",this.cleanedup=!1,this.cleanupResult="",this.completed=!1,this.states={init:-1,start:0,timedout:1,error:2,success:3,notapplicable:4},this.state=this.states.init,this.statesToBeSynced=["name","state","result","cleanedup","cleanupResult","completed"]}load(cb){get(this.file,resp=>{if(resp.error)return void cb(resp);let test;try{test=eval(resp.body)}catch(t){return void cb({error:t.message})}this.cleanup=test.cleanup,this.disabled=test.disabled?test.disabled:"false",this.extends=test.extends,this.requiredPlugins=test.requiredPlugins?test.requiredPlugins:[],this.timeout=test.timeout?test.timeout:36e5,this.title=test.title,this.currentStep;let objectsInTest=Object.keys(test);for(let t=0;t<objectsInTest.length;t++){let s=objectsInTest[t];-1===this.knownKeys.indexOf(s)&&(this[s]=test[objectsInTest[t]])}void 0!==this.extends?_getExtendedTestSteps(this.extends,t=>{if(t.error&&cb(t),t.steps)for(var s in t.test.steps)test.steps[s]=t.steps[s];this._addSteps(test.steps,cb)}):this._addSteps(test.steps,cb)})}_getExtendedTestSteps(ex,cb){get("js/tests/"+ex+".js",_resp=>{let test;_resp.error&&cb({error:"Error loading extended test"+test.extends});try{test=eval(_resp.body)}catch(t){return void cb({error:t.message})}cb({steps:test.steps})})}_addSteps(t,s){let e=Object.keys(t);for(let i=0;i<e.length;i++)this.steps[e[i]]=new Step(t[e[i]],i),i>=e.length-1&&s({test:this});this.loaded=!0}getState(){let t;switch(this.state){case this.states.init:t="Not Started";break;case this.states.start:t="Running";break;case this.states.timedout:t="Timed out";break;case this.states.error:t="Error";break;case this.states.success:t="Success";break;case this.states.notapplicable:t="Not Applicable"}return t}getPercCompleted(){let t="0";if(this.state>1||void 0!==this.currentStep){let s=Object.keys(this.steps);t=((s.indexOf(this.currentStep)+1)/s.length*100).toFixed(0)}return t}getResult(){return this.result}getError(){let t="";return this.state!==this.states.error&&this.state!==this.states.timedout&&this.state!==this.states.notapplicable||(t=this.result),t}start(){this.state=this.states.start,this.sync()}error(t){this.state=this.states.error,this.result=t,this.sync()}timedout(t){this.state=this.states.timedout,this.result=t,this.sync()}success(t){this.state=this.states.success,this.result=t,this.sync()}notApplicable(t){this.state=this.states.notapplicable,this.result=t,this.sync()}complete(t){this.completed=!0,this.sync()}cleanedup(t){this.cleanedup=!0,this.cleanupResult=t,this.sync()}}class Step extends Message{constructor(t,s,e,i){super(),this.assert=t.assert,this.description=t.description,this.params=t.params,this.sleep=t.sleep,this.test=t.test,this.timeout=t.timeout?t.timeout:3e5,this.validate=t.validate,this.messageContext="StepMessage",this.name=e,this.testName=i,this.stepIdx=s,this.response=null,this.result=null,this.states={init:-1,start:0,response:1,success:2,failed:3,needuser:4},this.state=this.states.init,this.statesToBeSynced=["name","stepIdx","response","result","state","testName"]}getState(){let t="Not Started";return this.state===this.states.init?t="Not Started":this.state===this.states.start?t="Running":this.state===this.states.success?t="Success":this.state===this.states.failed&&(t="Failed"),t}start(){this.state=this.states.start,this.sync()}setResponse(t){this.state=this.states.response,this.response=t,this.sync()}getResponse(){return this.response}success(t){this.state=this.states.success,this.result=t,this.sync()}fail(t){this.state=this.states.failed,this.result=t,this.sync()}needUser(){this.state=this.states.needuser,this.sync()}}